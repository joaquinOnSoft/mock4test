package com.joaquinonsoft.mock4test.identitycard;

import java.util.Random;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

/// Austria uses a Geburtsdatum und Personenkennzeichen (GPK) for some identification purposes,
/// but it's not a single universal ID. The most common "ID" is arguably the passport number or
/// driving license number.
///
/// The Geburtsdatum und Personenkennzeichen (GPK) is not a physical identity card number
/// issued to individuals like a Social Insurance Number or PESEL. Instead, it's a concept
/// used in Austrian data protection law (Datenschutzgesetz) for linking data across
/// different public sector applications while maintaining a degree of pseudonymity. It consists of:
///
///  - Geburtsdatum (Date of Birth): In YYYYMMDD format.
///  - Personenkennzeichen (PK): A pseudonymized four-digit number derived from a
///    person's identity attributes, generated by an official register, and not directly
///    chosen by the individual.600.666666
public class AustrianIdentityCard implements IIdentityCard {

    private static final Random RANDOM = new Random();
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd");

    @Override
    public boolean isValid(String id) {
        if (id == null || id.isEmpty()) {
            return false;
        }

        // GPK format: YYYYMMDD-XXXX (e.g., 19900115-1234)
        if (!id.matches("^\\d{8}-\\d{4}$")) {
            return false;
        }

        String[] parts = id.split("-");
        if (parts.length != 2) {
            return false;
        }

        String datePart = parts[0];
        String pkPart = parts[1];

        // 1. Validate date part (YYYYMMDD)
        try {
            LocalDate.parse(datePart, DATE_FORMATTER);
        } catch (DateTimeParseException e) {
            return false; // Invalid date format or value
        }

        // 2. Validate PK part (4 digits)
        // Already checked by regex ^\\d{4}$ within the main regex, but explicitly confirming.
        // if (!pkPart.matches("^\\d{4}$")) { return false; } // Redundant due to main regex

        return true;
    }

    @Override
    public String generateId() {
        // Generate a random birth date (e.g., between 1900 and 2024 for a reasonable range)
        int year = 1900 + RANDOM.nextInt(125); // ~1900 to 2024
        int month = 1 + RANDOM.nextInt(12);

        // Generate a random day, ensuring it's valid for the month and year
        int day = 1;
        try {
            LocalDate tempDate = LocalDate.of(year, month, 1); // Start with 1st of month
            day = 1 + RANDOM.nextInt(tempDate.lengthOfMonth()); // Random day up to max for that month
        } catch (java.time.DateTimeException e) {
            // Should not happen with valid year/month, but as a fallback
            day = 1 + RANDOM.nextInt(28); // Fallback to a safer range
        }

        LocalDate birthDate = LocalDate.of(year, month, day);
        String formattedDate = birthDate.format(DATE_FORMATTER);

        // Generate a random 4-digit Personenkennzeichen (PK)
        String pk = String.format("%04d", RANDOM.nextInt(10000)); // 0000 to 9999

        return formattedDate + "-" + pk;
    }
}